import torchvision
from colorama import Fore, Style
import torch
from torch import device, nn
import torch.nn.functional as F


def create_resnet18(device: device):
    # 1. Get the base model with pretrained weights and send to target device (GPU or CPU)
    weights = torchvision.models.ResNet18_Weights.DEFAULT
    model = torchvision.models.resnet18(weights=weights).to(device)

    # 2. Freeze the base model layers
    for param in model.parameters():
        param.requires_grad = False

    # 3. Change the classifier head
    model.fc = nn.Sequential(
        nn.Linear(512, 500),
        nn.ReLU(inplace=True),
        nn.Linear(500, 2),
    ).to(device)

    # 4. Give the model a name
    model.name = "resnet18"
    print(f"{Fore.GREEN}[INFO]{Style.RESET_ALL} Created model: {model.name}")
    return model, weights


def create_resnet50(device: device):
    # 1. Get the base model with pretrained weights and send to target device (GPU or CPU)
    weights = torchvision.models.ResNet50_Weights.DEFAULT
    model = torchvision.models.resnet50(weights=weights).to(device)

    # 2. Freeze the base model layers
    for param in model.parameters():
        param.requires_grad = False

    # 3. Change the classifier head
    model.fc = nn.Sequential(
        nn.Linear(2048, 500),
        nn.ReLU(inplace=True),
        nn.Linear(500, 2),
    ).to(device)

    # 4. Give the model a name
    model.name = "resnet50"
    print(f"{Fore.GREEN}[INFO]{Style.RESET_ALL} Created model: {model.name}")
    return model, weights


class DexRayModel(nn.Module):
    """Model to use on 1D BW vectors"""
    def __init__(self, img_size):
        super(DexRayModel, self).__init__()
        self.img_size = img_size

        self.conv1 = nn.Conv1d(in_channels=1, out_channels=64, kernel_size=12)
        self.maxpool1 = nn.MaxPool1d(kernel_size=12)
        self.conv2 = nn.Conv1d(in_channels=64, out_channels=128, kernel_size=12)
        self.maxpool2 = nn.MaxPool1d(kernel_size=12)

        self.flatten = nn.Flatten()

        self.fc1 = nn.Linear(in_features=43520, out_features=64)
        self.fc2 = nn.Linear(in_features=64, out_features=1)
        
        self.sigmoid = nn.Sigmoid()

    def forward(self, x):
        x = F.relu(self.conv1(x))
        x = self.maxpool1(x)
        x = F.relu(self.conv2(x))
        x = self.maxpool2(x)

        x = self.flatten(x)
        x = self.sigmoid(self.fc1(x))
        x = self.sigmoid(self.fc2(x))
        x = x.squeeze()
        return x


def create_dexray(device: device, img_size):
    model = DexRayModel(img_size)
    return model