import argparse
import os
from datetime import datetime
from pathlib import Path

import torch
from colorama import Fore, Style
from torch import nn, optim

from helper import data_setup, engine, models, utils

# Define constants for default values
DEFAULT_TYPE = "RGB"
DEFAULT_PADDING_TYPE = "random"
DEFAULT_EXTENSION_TYPE = "jpg"
DEFAULT_EPOCHS = 10
DEFAULT_MODEL = "resnet18"

# Make the script interactive through the CLI
parser = argparse.ArgumentParser(
    description="Script to train and test a model.",
    formatter_class=argparse.ArgumentDefaultsHelpFormatter,
)

# Add the type of images the APK files should be converted to
parser.add_argument(
    "-t",
    "--type",
    choices=["RGB", "BW"],
    default=DEFAULT_TYPE,
    help="Type of images.",
)

# Add the padding type to use
parser.add_argument(
    "-p",
    "--padding_type",
    choices=["random", "black", "white"],
    default=DEFAULT_PADDING_TYPE,
    help="Type of padding to used to create the images.",
)

# Add the extension type to use
parser.add_argument(
    "-ex", "--extension_type", choices=["jpg", "png"], default=DEFAULT_EXTENSION_TYPE
)

# Add the number of epochs to train the model
parser.add_argument(
    "-e",
    "--epochs",
    type=int,
    default=DEFAULT_EPOCHS,
    help="Number of epochs to train the model.",
)

# Add the model to use
parser.add_argument(
    "-mn",
    "--model",
    choices=["resnet18", "resnet50"],
    default=DEFAULT_MODEL,
    help="Model to use for training.",
)

args = parser.parse_args()

# Create the directories if they don't exist
os.makedirs("model_training/_models", exist_ok=True)

# Set the device
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

# Setup directories
image_path = Path("_images")
train_dir = image_path / "train"
test_dir = image_path / "test"

# 1. Create epochs list
num_epochs = args.epochs

# 2. Create a list of models
model_name = args.model

# 3. Keep track of experiment numbers
timestamp = datetime.now().strftime("%Y-%m-%d")
experiment_directory = f"model_training/runs/{timestamp}"
experiment_number = utils.get_experiment_number(experiment_directory)

# 4. Create information print outs
print(f"{Fore.GREEN}[INFO]{Style.RESET_ALL} Experiment number: {experiment_number}")
print(f"{Fore.GREEN}[INFO]{Style.RESET_ALL} Type of images: {args.type}")
print(f"{Fore.GREEN}[INFO]{Style.RESET_ALL} Padding type: {args.padding_type}")
print(f"{Fore.GREEN}[INFO]{Style.RESET_ALL} Model name: {model_name}")
print(f"{Fore.GREEN}[INFO]{Style.RESET_ALL} Number of epochs: {num_epochs}")

# 5. Create a new writer
experiment_name = f"_{args.type}_{args.padding_type}_{args.extension_type}"
writer = engine.create_writer(
    experiment_name=experiment_name,
    model_name=model_name,
    extra=f"{num_epochs}_epochs",
)

# 6. Create a new model
match model_name:
    case "resnet18":
        model, weights = models.create_resnet18(device=device)
    case "resnet50":
        model, weights = models.create_resnet50(device=device)

# 7. Create a new loss and optimizer for every model
loss_fn = nn.CrossEntropyLoss()
optimizer = optim.Adam(model.fc.parameters(), lr=0.001)

# 8. Retrieve automatic transforms
automatic_transforms = weights.transforms()

# 9. Create a new train and test dataloader for every model
train_dataloader, test_dataloader, class_names = data_setup.create_dataloaders(
    train_dir=train_dir,
    test_dir=test_dir,
    transform=automatic_transforms,
    batch_size=32,
)

print(
    f"{Fore.GREEN}[INFO]{Style.RESET_ALL} automatic_transforms: ",
    automatic_transforms,
)
print(f"{Fore.GREEN}[INFO]{Style.RESET_ALL} train_dataloader: ", train_dataloader)
print(f"{Fore.GREEN}[INFO]{Style.RESET_ALL} test_dataloader: ", test_dataloader)
print(
    f"{Fore.GREEN}[INFO]{Style.RESET_ALL} Number of classes: {len(class_names)}, class names: {class_names}"
)
# 10. Train the model
engine.train(
    model=model,
    train_dataloader=train_dataloader,
    test_dataloader=test_dataloader,
    optimizer=optimizer,
    loss_fn=loss_fn,
    epochs=num_epochs,
    device=device,
    writer=writer,
)

# 11. Save the model
save_filepath = f"_models/{model_name}_{args.type}_{args.padding_type}_{num_epochs}_epochs_{args.extension_type.lower()}.pth"
utils.save_model(model=model, target_dir="model_training", model_name=save_filepath)

# 12. Close the writer
writer.close()

# 13. Print a line to separate the experiments
print("-" * 100 + "\n")
