import argparse
from androguard.core.bytecodes.apk import APK
import os
import numpy as np
from tqdm import tqdm
import zipfile

def convert_file_size(size):
    # Convert size to Megabytes (Mo) or Kilobytes (Ko) depending on magnitude
    if size >= 1000000:
        return f"{size / 1000000:.2f} Mo"
    else:
        return f"{size / 1000:.2f} Ko"


parser = argparse.ArgumentParser(description="Calculate statistics for APK files.")
parser.add_argument("directory", help="The directory containing the APK files.")
args = parser.parse_args()

directory = args.directory

all_assets = []
all_dex = []
all_meta_inf = []
all_res = []
all_res_arsc = []
all_other = []

percent_all_assets = []
percent_all_dex = []
percent_all_meta_inf = []
percent_all_res = []
percent_all_res_arsc = []
percent_all_other = []

files = os.listdir(directory)


for file in tqdm(files, desc="Processing APK files"):
    apk = APK(os.path.join(directory, file))

    assets = 0
    dex = 0
    meta_inf = 0
    res = 0
    res_arsc = 0
    other = 0

    for f in apk.get_files():
        try:
            if f.startswith("res/"):
                res += len(apk.get_file(f))
            elif f.startswith("META-INF"):
                meta_inf += len(apk.get_file(f))
            elif f.endswith(".dex"):
                dex += len(apk.get_file(f))
            elif f.startswith("assets/"):
                assets += len(apk.get_file(f))
            elif f.endswith(".arsc"):
                res_arsc += len(apk.get_file(f))
            else:
                other += len(apk.get_file(f))
        except zipfile.BadZipFile:
            print("BadZipFile exception occurred. Skipping file:", f)

    sum = assets + dex + meta_inf + res + res_arsc + other

    if sum != 0:
        all_res.append(res)
        all_assets.append(assets)
        all_dex.append(dex)
        all_meta_inf.append(meta_inf)
        all_other.append(other)
        all_res_arsc.append(res_arsc)

        percent_all_assets.append(int((assets / sum) * 100))
        percent_all_dex.append(int((dex / sum) * 100))
        percent_all_meta_inf.append(int((meta_inf / sum) * 100))
        percent_all_res.append(int((res / sum) * 100))
        percent_all_res_arsc.append(int((res_arsc / sum) * 100))
        percent_all_other.append(int((other / sum) * 100))

percent_arrays = [percent_all_assets, percent_all_dex, percent_all_meta_inf, percent_all_res, percent_all_res_arsc,
                  percent_all_other]
arrays = [all_assets, all_dex, all_meta_inf, all_res, all_res_arsc, all_other]
array_names = ["Assets", "Dex", "Meta Inf", "Res", "Res Arsc", "Other"]

with open("goodware_file_sizes.txt", "a") as f:
    for array, percent_arrays, name in zip(arrays, percent_arrays, array_names):
        mean = np.mean(array)
        average_percent = np.mean(percent_arrays)
        median = np.median(array)

        q1 = np.percentile(array, 25)
        q2 = np.percentile(array, 50)
        q3 = np.percentile(array, 75)

        mean = convert_file_size(mean)
        median = convert_file_size(median)
        q1 = convert_file_size(q1)
        q2 = convert_file_size(q2)
        q3 = convert_file_size(q3)

        f.write("Statistics for " + name + "\n")
        f.write("Average %: " + str(int(average_percent)) + "\n")
        f.write("Mean: " + mean + "\n")
        f.write("Median: " + median + "\n")
        f.write("Quartiles: Q1 = " + q1 + " Q2 = " + q2 + " Q3 = " + q3 + "\n\n")
