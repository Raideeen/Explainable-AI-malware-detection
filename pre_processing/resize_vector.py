import glob
import multiprocessing
import os
from pathlib import Path

from PIL import Image
from tqdm import tqdm


def resize_image(args):
    apk_path, tgt_img_path, img_size = args
    with Image.open(apk_path) as img:
        img = img.resize((1, img_size * img_size), Image.BILINEAR)
        img.save(tgt_img_path)


def do_in_batch(source_dir, target_dir, img_size, multicore=True):
    source_path = Path(source_dir)
    target_path = Path(target_dir)
    categories = ["Goodware", "Malware"]
    subsets = ["train", "test"]

    for subset in subsets:
        for category in categories:
            src_folder = source_path / subset / category
            tgt_folder = target_path / subset / category
            tgt_folder.mkdir(parents=True, exist_ok=True)

            apk_paths = glob.glob(f"{src_folder}/*.png")

            args = []
            for apk_path in apk_paths:
                tgt_img_path = tgt_folder / Path(apk_path).name
                args.append((apk_path, tgt_img_path, img_size))

            if multicore:
                max_workers = multiprocessing.cpu_count()
                with multiprocessing.Pool(processes=max_workers) as pool:
                    list(
                        tqdm(
                            pool.imap_unordered(resize_image, args),
                            total=len(args),
                            desc=f"Resizing {category} in {subset}",
                        )
                    )
            else:
                for arg in tqdm(args, desc=f"Resizing {category} in {subset}"):
                    resize_image(arg)

    print("Conversion of APK files to images complete.")


if __name__ == "__main__":
    source_dir = "_vector_images"
    target_dir = "_resized_vector_128"
    IMG_SIZE = 128
    do_in_batch(source_dir, target_dir, IMG_SIZE)
