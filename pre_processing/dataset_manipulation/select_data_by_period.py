import argparse
import glob
import os
import shutil
from pathlib import Path

from colorama import Fore, Style
from tqdm import tqdm

DEFAULT_DATASET_FOLDER = "_dataset/71k_dataset"

DEFAULT_START_TRAIN_YEAR = 2022
DEFAULT_END_TRAIN_YEAR = 2022

DEFAULT_START_TRAIN_MONTH = 1
DEFAULT_END_TRAIN_MONTH = 12

DEFAULT_START_TEST_YEAR = 2023
DEFAULT_END_TEST_YEAR = 2023

DEFAULT_START_TEST_MONTH = 12
DEFAULT_END_TEST_MONTH = 12


def import_args():
    parser = argparse.ArgumentParser(description="Move data to train and test folders")
    parser.add_argument(
        "--dataset",
        type=str,
        default=DEFAULT_DATASET_FOLDER,
        help="The root directory of the dataset.",
    )

    parser.add_argument(
        "--start_train_year",
        type=int,
        default=DEFAULT_START_TRAIN_YEAR,
        help="The starting year of the training date range.",
    )
    parser.add_argument(
        "--end_train_year",
        type=int,
        default=DEFAULT_END_TRAIN_YEAR,
        help="The ending year of the training date range.",
    )

    parser.add_argument(
        "--start_train_month",
        type=int,
        default=DEFAULT_START_TRAIN_MONTH,
        help="The starting month of the training date range.",
    )
    parser.add_argument(
        "--end_train_month",
        type=int,
        default=DEFAULT_END_TRAIN_MONTH,
        help="The ending month of the training date range.",
    )

    parser.add_argument(
        "--start_test_year",
        type=int,
        default=DEFAULT_START_TEST_YEAR,
        help="The starting year of the testing date range.",
    )
    parser.add_argument(
        "--end_test_year",
        type=int,
        default=DEFAULT_END_TEST_YEAR,
        help="The ending year of the testing date range.",
    )

    parser.add_argument(
        "--start_test_month",
        type=int,
        default=DEFAULT_START_TEST_MONTH,
        help="The starting month of the testing date range.",
    )
    parser.add_argument(
        "--end_test_month",
        type=int,
        default=DEFAULT_END_TEST_MONTH,
        help="The ending month of the testing date range.",
    )
    return parser.parse_args()


def get_apk_paths(DATASET_FOLDER, start_year, start_month, end_year, end_month):
    """
    Get the paths of APK files within a specified date range.

    Args:
        DATASET_FOLDER (str): The root directory of the dataset.
        start_year (int): The starting year of the date range.
        start_month (int): The starting month of the date range.
        end_year (int): The ending year of the date range.
        end_month (int): The ending month of the date range.

    Returns:
        list: A list of APK file paths within the specified date range.
    """
    # Check if the end date is earlier than the start date
    if end_year < start_year or (end_year == start_year and end_month < start_month):
        raise ValueError("End date cannot be earlier than start date")

    apk_paths = []
    for year in range(start_year, end_year + 1):
        for month in range(
            start_month if year == start_year else 1,
            end_month + 1 if year == end_year else 13,
        ):
            month = str(month).zfill(2)
            apk_paths.extend(
                # glob.glob(f"{DATASET_FOLDER}/**/{year}_{month}/*.apk", recursive=True)
                path
                for path in glob.glob(
                    f"{DATASET_FOLDER}/**/{year}_{month}/*.apk", recursive=True
                )
                if "Greyware" not in path
            )
    return apk_paths


def create_train_test(train_path, test_path, DATASET_FOLDER):
    """
    Moves the training and test APKs to their respective folders in the dataset.

    Args:
        train_path (list): List of file paths for training APKs.
        test_path (list): List of file paths for test APKs.
        DATASET_FOLDER (str): Path to the dataset folder.

    Returns:
        None
    """
    for train_apk in tqdm(train_path, desc="Moving training APKs..."):
        base_name = os.path.basename(train_apk)
        category_name = os.path.basename(os.path.dirname(os.path.dirname(train_apk)))

        # Use os.path.abspath to get the absolute path
        train_apk = os.path.abspath(train_apk)
        os.makedirs(f"{DATASET_FOLDER}/train/{category_name}", exist_ok=True)
        os.symlink(train_apk, f"{DATASET_FOLDER}/train/{category_name}/{base_name}")

    for test_apk in tqdm(test_path, desc="Moving test APKs..."):
        base_name = os.path.basename(test_apk)
        category_name = os.path.basename(os.path.dirname(os.path.dirname(test_apk)))

        # Use os.path.abspath to get the absolute path
        test_apk = os.path.abspath(test_apk)
        os.makedirs(f"{DATASET_FOLDER}/test/{category_name}", exist_ok=True)
        os.symlink(test_apk, f"{DATASET_FOLDER}/test/{category_name}/{base_name}")


if __name__ == "__main__":
    args = import_args()

    DATASET_FOLDER = Path(args.dataset)

    train_path = get_apk_paths(
        DATASET_FOLDER,
        args.start_train_year,
        args.start_train_month,
        args.end_train_year,
        args.end_train_month,
    )
    test_path = get_apk_paths(
        DATASET_FOLDER,
        args.start_test_year,
        args.start_test_month,
        args.end_test_year,
        args.end_test_month,
    )

    # Remove old APKs symbolic links
    if os.path.exists(DATASET_FOLDER / "train") or os.path.exists(
        DATASET_FOLDER / "test"
    ):
        print(f"{Fore.GREEN}[INFO]{Style.RESET_ALL} Removing old APKs symbolic links.")
        shutil.rmtree(DATASET_FOLDER / "train")
        shutil.rmtree(DATASET_FOLDER / "test")

    os.makedirs(DATASET_FOLDER / "train", exist_ok=True)
    os.makedirs(DATASET_FOLDER / "test", exist_ok=True)

    create_train_test(train_path, test_path, DATASET_FOLDER)

    print(
        f"{Fore.GREEN}[INFO]{Style.RESET_ALL} Done creating train and test folders for APKs with specified date range."
        + f"\n- {args.start_train_year}-{args.start_train_month} to {args.end_train_year}-{args.end_train_month} for training"
        + f"\n- {args.start_test_year}-{args.start_test_month} to {args.end_test_year}-{args.end_test_month} for testing."
    )
