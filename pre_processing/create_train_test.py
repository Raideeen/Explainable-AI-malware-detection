"""
Script to split the dataset into train and test.

This script takes a dataset directory containing subfolders for each category of data (e.g., "Goodware", "Malware").
It splits the dataset into train and test sets based on a specified train ratio.
The script creates separate train and test directories and moves the files from the original subfolders to the corresponding train or test subfolders.
The files are shuffled randomly before splitting.

Example usage:
    python train_test_creation.py -r 0.8

Arguments:
    -r, --ratio (float): The ratio of train data to test data. Default is 0.8 (80% train, 20% test).
"""

import argparse
import os
import random
import shutil
from pathlib import Path

from colorama import Fore, Style
from tqdm import tqdm

parser = argparse.ArgumentParser("Script to split the dataset into train and test.")
parser.add_argument("-r", "--ratio", type=float, default=0.8, help="Train ratio.")
args = parser.parse_args()

# Set the ratio of train to test data
train_ratio = args.ratio

# Define the paths
dataset_path = Path("_images")
train_path = dataset_path / "train"
test_path = dataset_path / "test"

# Get the list of subfolders in the dataset directory
subfolders = [
    f for f in os.listdir(dataset_path) if os.path.isdir(os.path.join(dataset_path, f))
]

# Define categories and their subdirectories
categories = ["Goodware", "Malware"]

# Create combined folders for each category
for category in categories:
    category_path = dataset_path / category
    os.makedirs(category_path, exist_ok=True)
    for subdir in subfolders:
        if category in subdir:
            subdir_path = dataset_path / subdir
            if subdir_path.exists():
                for file in os.listdir(subdir_path):
                    shutil.move(str(subdir_path / file), str(category_path / file))
                os.rmdir(subdir_path)

# Delete "train" and "test" subfolders if they already exist
if train_path.exists() or test_path.exists():
    print(
        f"{Fore.GREEN}[INFO]{Style.RESET_ALL} Deleting existing train and test subfolders..."
    )
if train_path.exists():
    shutil.rmtree(train_path)
if test_path.exists():
    shutil.rmtree(test_path)

# Create the train and test directories
os.makedirs(train_path, exist_ok=True)
os.makedirs(test_path, exist_ok=True)

# For each category, split the files into train and test directories
for category in tqdm(categories, desc="Processing categories"):
    category_path = dataset_path / category
    files = os.listdir(category_path)

    # Shuffle the files randomly
    random.shuffle(files)

    # Calculate the number of files for training and testing
    num_train = int(len(files) * train_ratio)

    # Create the corresponding subfolder in the train and test directories
    os.makedirs(train_path / category, exist_ok=True)
    os.makedirs(test_path / category, exist_ok=True)

    # Copy the files to the train and test directories
    for i, file in enumerate(
        tqdm(files, desc=f"Processing {category} files", leave=False)
    ):
        if i < num_train:
            shutil.move(str(category_path / file), str(train_path / category / file))
        else:
            shutil.move(str(category_path / file), str(test_path / category / file))

# Remove the combined category folders in the main directory
for category in categories:
    os.rmdir(dataset_path / category)
