"""
Script to split the dataset into train and test.

This script takes a dataset directory containing subfolders for each category of data (e.g., "Goodware", "Malware").
It splits the dataset into train and test sets based on a specified train ratio. Optionally, it can also create a validation set.
The script creates separate train and test (and validation) directories and moves the files from the original subfolders to the corresponding train or test (or validation) subfolders.
The files are shuffled randomly before splitting.

Example usage:
    python train_test_creation.py -r 0.8 -i "_bw_images"

Arguments:
    -r, --ratio (float): The ratio of train data to test data. Default is 0.8 (80% train and 20% test if no val set, 80% train, 10% val and 10% test else).
    -i, --images (string): The path of the images created. Default is "_images"
    -v, --validation : Indicate that a validation set is expected.
"""

import argparse
import os
import random
import shutil
from pathlib import Path

from colorama import Fore, Style
from tqdm import tqdm

# The flow of the script is as follows:
# 1. Get the list of subfolders present in the "_images" directory created by apk_to_image.py.
# Ex: ["Goodware_Obf", "Goodware_NoObf", "Malware_Obf", "Malware_NoObf"]
# 2. Create combined folders for each category (e.g. move "Goodware_Obf", "Goodware_NoObf" to "Goodware" folder, and "Malware_Obf", "Malware_NoObf" to "Malware" folder)
# 3. Delete "train" and "test" subfolders if they already exist
# 4. Create the train and test directories
# 5. For each category (Goodware, Malware), look for the files in the combined folders and shuffle them randomly.
# 6. Move the files of the combined folders to the train and test directories based on the train ratio.


def parse_args():
    parser = argparse.ArgumentParser("Script to split the dataset into train and test.")
    parser.add_argument(
        "-i", "--images", default="_images", help="Root path where images are saved"
    )
    parser.add_argument("-r", "--ratio", type=float, default=0.8, help="Train ratio.")
    parser.add_argument(
        "-v", "--validation", action="store_true", help="Create a validation dataset."
    )
    parser.add_argument(
        "--time-based",
        action="store_true",
        help="Use existing train and test directories.",
    )
    return parser.parse_args()


def move_files_from_subdir_to_category(subdir_path, category_path):
    """
    Move files from a subdirectory to a category directory.

    Args:
        subdir_path (str): Path to the subdirectory containing the files.
        category_path (str): Path to the category directory where the files will be moved.

    Returns:
        None
    """
    for file in os.listdir(subdir_path):
        shutil.move(str(subdir_path / file), str(category_path / file))
    os.rmdir(subdir_path)


def process_subdirs(dataset_path, category, category_path):
    """
    Process subdirectories in the dataset path and move files from the subdirectories to the specified category path.

    Args:
        dataset_path (str): The path to the dataset directory.
        category (str): The category name.
        category_path (str): The path to the category directory.

    Returns:
        None
    """
    for subdir in os.listdir(dataset_path):
        if category in subdir and category != subdir:
            subdir_path = dataset_path / subdir
            if subdir_path.is_dir():
                move_files_from_subdir_to_category(subdir_path, category_path)


def combine_folders(dataset_path, categories):
    """
    Combine folders for each category in the dataset.

    Args:
        dataset_path (str): The path to the dataset.
        categories (list): A list of category names.

    Returns:
        None
    """
    for category in categories:
        category_path = dataset_path / category
        os.makedirs(category_path, exist_ok=True)
        process_subdirs(dataset_path, category, category_path)


def combine_existing_folders(base_path, categories):
    """
    Combine existing folders for each category in the given base path.

    Args:
        base_path (str): The base path where the folders will be combined.
        categories (list): A list of categories to combine.

    Returns:
        None
    """
    for dataset in ["train", "test"]:
        dataset_path = base_path / dataset
        for category in categories:
            category_path = dataset_path / category
            os.makedirs(category_path, exist_ok=True)
            process_subdirs(dataset_path, category, category_path)


def delete_existing_train_test(train_path, test_path):
    # Delete "train" and "test" subfolders if they already exist
    if train_path.exists() or test_path.exists():
        print(
            f"{Fore.GREEN}[INFO]{Style.RESET_ALL} Deleting existing train and test subfolders..."
        )
    if train_path.exists():
        shutil.rmtree(train_path)
    if test_path.exists():
        shutil.rmtree(test_path)


def split_dataset(
    dataset_path, train_path, test_path, val_path, categories, train_ratio, val
):
    # Combine folders for each category
    combine_folders(dataset_path, categories)

    # Delete "train" and "test" subfolders if they already exist
    delete_existing_train_test(train_path, test_path)

    # Create the train and test directories
    os.makedirs(train_path, exist_ok=True)
    os.makedirs(test_path, exist_ok=True)
    if val_path:
        os.makedirs(val_path, exist_ok=True)

    # For each category, split the files into train and test directories
    for category in tqdm(categories, desc="Processing categories"):
        category_path = dataset_path / category
        files = os.listdir(category_path)

        # Shuffle the files randomly
        random.shuffle(files)

        # Calculate the number of files for training and testing
        num_train = int(len(files) * train_ratio)
        num_val = int(len(files) * (1 - train_ratio) / 2) if val else 0

        # Create the corresponding subfolder in the train and test directories
        os.makedirs(train_path / category, exist_ok=True)
        os.makedirs(test_path / category, exist_ok=True)
        if val_path:
            os.makedirs(val_path / category, exist_ok=True)

        # Copy the files to the train and test directories
        for i, file in enumerate(
            tqdm(files, desc=f"Processing {category} files", leave=False)
        ):
            # Move to the train directory
            if i < num_train:
                shutil.move(
                    str(category_path / file), str(train_path / category / file)
                )
            # Move to the validation directory
            elif i < num_train + num_val:
                if val_path:
                    shutil.move(
                        str(category_path / file), str(val_path / category / file)
                    )
            # Move to the test directory
            else:
                shutil.move(str(category_path / file), str(test_path / category / file))

    # Remove the combined category folders in the main directory
    for category in categories:
        os.rmdir(dataset_path / category)


if __name__ == "__main__":
    args = parse_args()

    # Define categories and their subdirectories
    categories = ["Goodware", "Malware"]

    # Define the paths
    dataset_path = Path(args.images)
    train_path = dataset_path / "train"
    test_path = dataset_path / "test"

    if args.existing:
        print(
            f"{Fore.GREEN}[INFO]{Style.RESET_ALL} Using existing train and test directories."
        )

        # Delete "train" and "test" subfolders if they already exist
        delete_existing_train_test(train_path=train_path, test_path=test_path)

        combine_existing_folders(Path(args.images), categories)
    else:
        print("Split the dataset into train and test.")
        # Set the ratio of train to test data
        train_ratio = args.ratio

        # Boolean corresponding to the creation of a validation dataset
        val = args.validation
        val_path = dataset_path / "val" if val else None

        split_dataset(
            dataset_path, train_path, test_path, val_path, categories, train_ratio, val
        )
