import os

import matplotlib.pyplot as plt
import numpy as np
import umap
import umap.plot
from PIL import Image
from tqdm import tqdm

# Image shape for BW images of original size 1024x1024 but reduced to 593x593
# thanks to the BW -> RGB conversion
IMAGE_SHAPE = (593, 593)


def process_image(filepath, image_shape):
    image = Image.open(filepath)
    image_resized = image.resize(image_shape)  # Resize the image
    image_array = np.array(image_resized)
    return image_array


def load_images(goodware_folder, malware_folder, image_shape=(256, 256)):
    image_list = []
    labels = []

    # Load Goodware images
    for filename in tqdm(os.listdir(goodware_folder), desc="Loading Goodware Images"):
        if filename.endswith(".png") or filename.endswith(".jpg"):
            filepath = os.path.join(goodware_folder, filename)
            image_array = process_image(filepath, image_shape)
            image_list.append(image_array)
            labels.append("Goodware")  # 0 for Goodware

    # Load Malware images
    for filename in tqdm(os.listdir(malware_folder), desc="Loading Malware Images"):
        if filename.endswith(".png") or filename.endswith(".jpg"):
            filepath = os.path.join(malware_folder, filename)
            image_array = process_image(filepath, image_shape)
            image_list.append(image_array)
            if "MALWARE" in filename:
                labels.append("Malware")  # 1 for Malware
            else:
                labels.append("Goodware")  # 0 for Goodware

    images = np.array(image_list)
    labels = np.array(labels)

    return images, labels


# Loading images
malware_folder = "_images/Subset_malware_obf/"
goodware_folder = "_images/Subset_goodware_obf/"

X, y = load_images(goodware_folder, malware_folder)
images = [Image.fromarray(image) for image in X]

# Convert images to numpy arrays and flatten them
image_vectors = [np.array(image).flatten() for image in images]

# Stack all image vectors into a numpy array
image_matrix = np.stack(image_vectors)

# Apply UMAP
reducer = umap.UMAP()
embedding = reducer.fit_transform(image_matrix)

# Create a new figure
plt.figure()

# Plot UMAP
umap.plot.points(reducer, labels=y)

# Save the figure
plt.savefig("umap_plot.png", bbox_inches="tight")
