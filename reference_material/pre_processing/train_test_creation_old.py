"""
Separate the dataset into train and test directories with a given ratio. 
The script takes a dataset directory containing subfolders, where each subfolder represents a class. 
It shuffles the files within each subfolder and splits them into train and test directories based on the specified train ratio.

Inputs:
- dataset_path: Path to the dataset directory.
- train_ratio: Ratio of files to be allocated for training (default is 0.8).

Outputs:
- Creates 'train' and 'test' subdirectories within the dataset directory.
- Moves the files from the original subfolders to the corresponding train or test subdirectories.

Example usage:
    python train_test_creation_old.py -r 0.8

Arguments:
    -r, --ratio (float): The ratio of train data to test data. Default is 0.8 (80% train, 20% test).
"""

import argparse
import os
import random
import shutil
from pathlib import Path

from colorama import Fore, Style
from tqdm import tqdm

parser = argparse.ArgumentParser("Script to split the dataset into train and test.")

parser.add_argument("-r", "--ratio", type=float, default=0.8, help="Train ratio.")

args = parser.parse_args()

# Set the ratio of train to test data
train_ratio = args.ratio

# Define the paths
dataset_path = Path("_images")
train_path = dataset_path / "train"
test_path = dataset_path / "test"

# Get the list of subfolders in the dataset directory
subfolders = [
    f for f in os.listdir(dataset_path) if os.path.isdir(os.path.join(dataset_path, f))
]

# Delete "train" and "test" subfolders if it already exist
print(
    f"{Fore.GREEN}[INFO]{Style.RESET_ALL} Deleting existing train and test subfolders..."
)
if "train" in subfolders:
    shutil.rmtree(os.path.join(dataset_path, "train"))
    subfolders.remove("train")
if "test" in subfolders:
    shutil.rmtree(os.path.join(dataset_path, "test"))
    subfolders.remove("test")

# Create the train and test directories
os.makedirs(train_path, exist_ok=True)
os.makedirs(test_path, exist_ok=True)

# For each subfolder, split the files into train and test directories
for subfolder in tqdm(subfolders, desc="Processing subfolders"):
    # Get the list of files in the subfolder
    files = os.listdir(os.path.join(dataset_path, subfolder))

    # Shuffle the files randomly
    random.shuffle(files)

    # Calculate the number of files for training and testing
    num_train = int(len(files) * train_ratio)

    # Create the corresponding subfolder in the train and test directories
    os.makedirs(os.path.join(train_path, subfolder), exist_ok=True)
    os.makedirs(os.path.join(test_path, subfolder), exist_ok=True)

    # Copy the files to the train and test directories
    for i, file in enumerate(
        tqdm(files, desc=f"Processing {subfolder} files", leave=False)
    ):
        if i < num_train:
            shutil.move(
                os.path.join(dataset_path, subfolder, file),
                os.path.join(train_path, subfolder, file),
            )
        else:
            shutil.move(
                os.path.join(dataset_path, subfolder, file),
                os.path.join(test_path, subfolder, file),
            )

    # Remove the subfolder
    os.rmdir(os.path.join(dataset_path, subfolder))
