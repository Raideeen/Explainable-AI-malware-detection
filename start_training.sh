#!/bin/bash

# This script is used to start the training process of the model with all the
# steps.

# Define common arguments
type_options=("RGB" "BW")
preprocessing_options=("random" "black" "white")
extension_options=("png" "jpg")
model_options=("resnet18" "resnet50")
epochs_options=(50)

# Arguments to enable time period dataset and set the time period
# The arguments for the time period must be coherent with the dataset
enable_time_period_dataset="false"

start_train_year=2022
end_train_year=2022

start_train_month=1
end_train_month=12

start_test_year=2023
end_test_year=2023

start_test_month=12
end_test_month=12

enable_first_time_sorting="false"
unsorted_dataset_path="_dataset/unsorted_dataset"
dataset_information_path="/pre_processing/dataset_manipulation/apk_list_tags.csv"

# If enable_time_period_dataset is "true", set it to "--time-based"; otherwise, set it to an empty string
if [[ ${enable_time_period_dataset} == "true" ]]; then
	enable_time_period_dataset="--time-based"
else
	enable_time_period_dataset=""
fi

# Function to execute a command and handle errors
execute_command() {
	"$@"
	local exit_code=$?
	if [[ ${exit_code} -ne 0 ]]; then
		echo "Error executing command: $@"
		exit "${exit_code}"
	fi
}

if [[ ${enable_first_time_sorting} == "true" ]]; then
	execute_command python pre_processing/dataset_manipulation/sort_by_period.py --unsorted_dataset "${unsorted_dataset_path}" --csv "${dataset_information_path}"
fi

if [[ ${enable_time_period_dataset} == "--time-based" ]]; then
	execute_command python pre_processing/dataset_manipulation/select_data_by_period.py --start_train_year "${start_train_year}" --end_train_year "${end_train_year}" --start_train_month "${start_train_month}" --end_train_month "${end_train_month}" --start_test_year "${start_test_year}" --end_test_year "${end_test_year}" --start_test_month "${start_test_month}" --end_test_month "${end_test_month}"
fi

# Loop through type and preprocessing options
for type in "${type_options[@]}"; do
	for preprocessing in "${preprocessing_options[@]}"; do
		for extension in "${extension_options[@]}"; do

			# Execute commands with the current type and preprocessing options
			if [[ -z ${enable_time_period_dataset} ]]; then
				execute_command python -m pre_processing.apk_to_image -t "${type}" -p "${preprocessing}" -ex "${extension}"
				execute_command python -m pre_processing.create_train_test
			else
				execute_command python -m pre_processing.apk_to_image -t "${type}" -p "${preprocessing}" -ex "${extension}" "${enable_time_period_dataset}"
				execute_command python -m pre_processing.create_train_test "${enable_time_period_dataset}"
			fi

			for model in "${model_options[@]}"; do
				for epochs in "${epochs_options[@]}"; do
					execute_command python -m model_training.train_test_model -t "${type}" -p "${preprocessing}" -ex "${extension}" -e "${epochs}" -mn "${model}"
					execute_command python -m visualization.saliency -t "${type}" -p "${preprocessing}" -ex "${extension}" -e "${epochs}" -mn "${model}"
				done
			done
		done
	done
done
