"""
Contains various utility functions for PyTorch model training, saving and also file manipulation.
"""
import glob
import os
from pathlib import Path

import torch
from colorama import Fore, Style


def save_model(model: torch.nn.Module, target_dir: str, model_name: str):
    """Saves a PyTorch model to a target directory.

    Args:
    model: A target PyTorch model to save.
    target_dir: A directory for saving the model to.
    model_name: A filename for the saved model. Should include
      either ".pth" or ".pt" as the file extension.

    Example usage:
    save_model(model=model_0,
               target_dir="models",
               model_name="05_going_modular_tingvgg_model.pth")
    """
    # Create target directory
    target_dir_path = Path(target_dir)
    target_dir_path.mkdir(parents=True, exist_ok=True)

    # Create model save path
    assert model_name.endswith(".pth") or model_name.endswith(
        ".pt"
    ), "model_name should end with '.pt' or '.pth'"
    model_save_path = target_dir_path / model_name

    # Save the model state_dict()
    print(f"{Fore.GREEN}[INFO]{Style.RESET_ALL} Saving model to: {model_save_path}")
    torch.save(obj=model.state_dict(), f=model_save_path)


def get_experiment_number(directory):
    """
    Get the experiment number from a given directory.

    If the experiment number file exists in the directory, it reads the number from the file.
    Otherwise, it starts from 0 and increments the number by 1.

    Args:
      directory (str): The directory path where the experiment number file is located.

    Returns:
      int: The experiment number.

    """
    # Ensure the directory exists
    os.makedirs(directory, exist_ok=True)

    # Define the path to the experiment number file
    experiment_file_path = os.path.join(directory, "experiment_number.txt")

    # Read the experiment number if it exists, otherwise start from 0
    if os.path.exists(experiment_file_path):
        with open(experiment_file_path, "r") as f:
            experiment_number = int(f.read())
    else:
        experiment_number = 0

    # Increment the experiment number and write it back to the file
    experiment_number += 1
    with open(experiment_file_path, "w") as f:
        f.write(str(experiment_number))

    return experiment_number


def get_apk_paths(dataset, start_year, start_month, end_year, end_month):
    """
    Get the paths of APK files within a specified date range.

    Args:
        dataset (str): The root directory of the dataset.
        start_year (int): The starting year of the date range.
        start_month (int): The starting month of the date range.
        end_year (int): The ending year of the date range.
        end_month (int): The ending month of the date range.

    Returns:
        list: A list of APK file paths within the specified date range.
    """
    # Check if the end date is earlier than the start date
    if end_year < start_year or (end_year == start_year and end_month < start_month):
        raise ValueError("End date cannot be earlier than start date")

    apk_paths = []
    for year in range(start_year, end_year + 1):
        for month in range(
            start_month if year == start_year else 1,
            end_month + 1 if year == end_year else 13,
        ):
            month = str(month).zfill(2)
            apk_paths.extend(
                glob.glob(f"{dataset}/**/{year}_{month}/*.apk", recursive=True)
            )
    return apk_paths
